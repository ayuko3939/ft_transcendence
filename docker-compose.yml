version: "3.8"

services:
  database-init:
    image: ft_transcendence_databaseinit:${COMMIT_HASH}
    build:
      context: ./
      dockerfile: ./database/Dockerfile
    environment:
      - DB_FILE_DIR=/var/lib/db
      - DB_FILE_NAME=${DB_FILE_NAME}
    entrypoint: [ "/app/init.sh" ]
    volumes:
      - logdir:/app/logs
      - dbdir:/var/lib/db

  frontend:
    image: ft_transcendence_frontend:${COMMIT_HASH}
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
    environment:
      - DB_FILE_DIR=/var/lib/db
      - DB_FILE_NAME=${DB_FILE_NAME}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - BACKEND_WS_URL="ws://backend:3001/game"
    ports:
      - "3000:3000"
    volumes:
      - logdir:/app/logs
      - dbdir:/var/lib/db
    depends_on:
      database-init:
        condition: service_completed_successfully

  backend:
    image: ft_transcendence_backend:${COMMIT_HASH}
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    command: [ "/app/dist/index.js"]
    ports:
      - "3001:3001"
    volumes:
      - logdir:/app/logs
      - dbdir:/var/lib/db
    depends_on:
      database-init:
        condition: service_completed_successfully
      kibana:
        condition: service_healthy

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./internal/settings/elasticsearch_entrypoint.sh:/elasticsearch_entrypoint.sh
    user: "root"
    command: ["/bin/bash", "/elasticsearch_entrypoint.sh"]
    healthcheck:
      test:
        ["CMD-SHELL", "[ -f config/certs/elastic-search/elastic-search.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    env_file:
      - .env

  elastic-search:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elastic-search
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elastic-search/elastic-search.key
      - xpack.security.http.ssl.certificate=certs/elastic-search/elastic-search.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elastic-search/elastic-search.key
      - xpack.security.transport.ssl.certificate=certs/elastic-search/elastic-search.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    # ulimits: # この設定は権限不足なので使用できない
    #   memlock:
    #     soft: -1
    #     hard: -1
    healthcheck:
      test: [
          "CMD-SHELL", # /bin/bash -c と同じ意味
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elastic-search:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elastic-search:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test: [
          "CMD-SHELL", # /bin/bash -c と同じ意味
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    depends_on:
      elastic-search:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata:/usr/share/logstash/data
      - "logdir:/usr/share/logstash/ingest_data/"
      - "./internal/settings/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elastic-search:9200

volumes:
  logdir:
    driver: local
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata:
    driver: local
  dbdir:
    driver: local